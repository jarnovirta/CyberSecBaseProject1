Installing and running the application:
1. Download the code from https://github.com/jarnovirta/CyberSecBaseProject1.git
2. Start the application. It should start in the TMCNetbeans IDE by clicking Run. 
In other IDE's you may need to start it from command line with mvn spring-boot:run. The
app uses .JSP's (Java Server Pages) for views to produce a plausible case of XSS 
vulnerability and getting the Spring Boot embedded Tomcat server to work 
with JSP's took a bit of hacking... For this reason, the packaging in pom.xml is
war instead of jar. But it can be run as stand-alone.
3. In your browser, navigate to http://localhost:8080/

Issue: cross-site scripting vulnerability
Steps to reproduce:
1. Navigate to http://localhost:8080/
2. Under 'New post' enter into the 'Title' or the 'Content' input field the following:
<script>alert('You have been pwned!');</script>
3. Click 'Post'
4. The page refreshes, the JavaScript is executed and an alert appears in your
browser window. 

Steps to fix the vulnerability: 
HTML (such as <script> tags) needs to be escaped in the app's web views when rendering user provided content. 
Most view template frameworks provide tools for escaping HTML in rendered data.
For example, the popular Thymeleaf framework takes care of escaping HTML when
text in variables is rendered using the th:text tag attribute. In my project, with
JSP's, the fix would be as follow:
1. Open webapp/WEB-INF/jsp/forum.jsp
2. Replace ${post.title} and ${post.content} with <c:out value="${post.title}" />
and <c:out value="${post.content}" />

Issue: Broken authentication (hard-coded weak admin password)
Steps to reproduce:
1. Go to http://localhost:8080/
2. You will see by the existing post that there is an admin account with username
'admin'.
3. Use a fuzzer like OWASP ZAP and a list of common passwords (this one is very 
easy and will be on most top 500 or so password lists
4. Using ZAP as a proxy to log traffic, navigate to localhost:8080/login
5. Enter username as 'admin' and some password
6. Click 'login'
7. In ZAP, in the "History" tab, select the POST request generated by the login
attempt and use it as a basis for the fuzzer. 
8. In the fuzzer results, look for a response with HTTP code 302 a JSESSIONID cookie.
The correct password is the password value in the corresponding request.
9. An additional problem may be the fact that the username 'admin' and the
password hash are hard-coded. 

Steps to correct the issue:
1. Use a stronger password for the admin account.
2. It may not be advisable to include hard-coded admin credentials in source code.
They may be discovered on GitHub or elsewhere. In this case, the password is
hashed using Bcrypt and a cost factor of 10. It should not be breakable. A weaker
hashing algorithm or a plain text password would, however be a risk. A safer solution
would be to insert admin account username and password hash into the database
manually upon installing the app, or to include such data in a separate file
which is excluded from the Git repository.


Issue: Broken access control

Issue: SQL injection

Issue: Cross-site request forgery

